# 1 "lexer.mll"
 
  open Lexing
  open Parser
  open Range
  
  exception Lexer_error of Range.t * string

  let pos_of_lexpos (p:Lexing.position) : pos =
    mk_pos (p.pos_lnum) (p.pos_cnum - p.pos_bol)
    
  let mk_lex_range (p1:Lexing.position) (p2:Lexing.position) : Range.t =
    mk_range p1.pos_fname (pos_of_lexpos p1) (pos_of_lexpos p2)

  let lex_range lexbuf : Range.t = mk_lex_range (lexeme_start_p lexbuf)
      (lexeme_end_p lexbuf)

  let reset_lexbuf (filename:string) lexbuf : unit =
    lexbuf.lex_curr_p <- {
      pos_fname = filename;
      pos_cnum = 0;
      pos_bol = 0;
      pos_lnum = 1;
    }

  let newline lexbuf =
    lexbuf.lex_curr_p <- { (lexeme_end_p lexbuf) with
      pos_lnum = (lexeme_end_p lexbuf).pos_lnum + 1;
      pos_bol = (lexeme_end lexbuf) }
    
  (* Boilerplate to define exceptional cases in the lexer. *)
  let unexpected_char lexbuf (c:char) : 'a =
    raise (Lexer_error (lex_range lexbuf,
        Printf.sprintf "Unexpected character: '%c'" c))

  (* Lexing reserved words *)
  let reserved_words = [
  (* Keywords *)
  ("true", fun i -> TRUE i);
  ("false", fun i -> FALSE i);
  ("unit", fun i -> TUNIT i);
  ("bool", fun i -> TBOOL i);
  ("int", fun i -> TINT i);
  ("string", fun i -> TSTRING i);
  ("else", fun i -> ELSE i);
  ("if", fun i -> IF i);
  ("for", fun i -> FOR i);
  ("while", fun i -> WHILE i);
  ("return", fun i -> RETURN i);
  ("new", fun i -> NEW i);
  ("fun", fun i -> FUN i);

  (* Symbols *)
  ( ";", fun i -> SEMI i);
  ( ",", fun i -> COMMA i);
  ( "{", fun i -> LBRACE i);
  ( "}", fun i -> RBRACE i);
  ( "+", fun i -> PLUS i);
  ( "-", fun i -> DASH i);
  ( "*", fun i -> STAR i);
  ( "=", fun i -> EQ i);
  ( "==", fun i -> EQEQ i);
  ( "<<", fun i -> LTLT i);
  ( ">>", fun i -> GTGT i);
  ( ">>>", fun i -> GTGTGT i);
  ( "!=", fun i -> BANGEQ i);
  ( "<", fun i -> LT i);
  ( "<=", fun i -> LTEQ i);
  ( ">", fun i -> GT i);
  ( ">=", fun i -> GTEQ i);
  ( "!", fun i -> BANG i);
  ( "~", fun i -> TILDE i);
  ( "&", fun i -> AMPER i);
  ( "|", fun i -> BAR i);
  ( "[&]", fun i -> IAND i);
  ( "[|]", fun i -> IOR i);
  ( "(", fun i -> LPAREN i);
  ( ")", fun i -> RPAREN i);
  ( "[", fun i -> LBRACKET i);
  ( "]", fun i -> RBRACKET i);
  ( "->", fun i -> ARROW i);
  ]

  type build_fun = Range.t -> Parser.token
  let (symbol_table : (string, build_fun) Hashtbl.t) = Hashtbl.create 1024
  let _ =
    List.iter (fun (str,f) -> Hashtbl.add symbol_table str f) reserved_words

  let create_token lexbuf =
    let str = lexeme lexbuf in 
    let r = lex_range lexbuf in
    try (Hashtbl.find symbol_table str) r 
    with _ -> IDENT (r, str)

  (* Lexing comments and strings *)
  let string_buffer = ref (String.create 2048)
  let string_end = ref 0
  let start_lex = ref (Range.start_of_range Range.norange)

  let start_pos_of_lexbuf lexbuf : pos =
    (pos_of_lexpos (lexeme_start_p lexbuf))

  let lex_long_range lexbuf : Range.t =
    let end_p = lexeme_end_p lexbuf in
    mk_range end_p.pos_fname (!start_lex) (pos_of_lexpos end_p)  

  let reset_str () = string_end := 0

  let add_str ch =
    let x = !string_end in
    let buffer = !string_buffer
    in
      if x = String.length buffer then
        begin
          let new_buffer = String.create (x*2) in
          String.blit buffer 0 new_buffer 0 x;
          String.set new_buffer x ch;
          string_buffer := new_buffer;
          string_end := x+1
        end
      else
        begin
          String.set buffer x ch;
          string_end := x+1
        end

  let get_str () = String.sub (!string_buffer) 0 (!string_end)


# 131 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\247\255\248\255\008\000\002\000\033\000\067\000\003\000\
    \030\000\001\000\249\255\003\000\085\000\095\000\119\000\253\255\
    \016\000\255\255\254\255\194\000\217\000\034\000\036\000\037\000\
    \009\001\251\255\252\255\253\255\089\000\106\000\255\255\254\255\
    \242\000\251\255\252\255\253\255\254\255\255\255\016\001\249\255\
    \106\000\251\255\252\255\253\255\254\255\255\255\031\001\250\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\007\000\007\000\007\000\007\000\007\000\
    \007\000\006\000\255\255\005\000\004\000\004\000\003\000\255\255\
    \008\000\255\255\255\255\255\255\004\000\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\002\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \027\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \033\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\011\000\010\000\010\000\011\000\009\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\004\000\015\000\011\000\000\000\000\000\002\000\000\000\
    \002\000\002\000\002\000\002\000\002\000\008\000\022\000\016\000\
    \013\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\018\000\002\000\006\000\007\000\005\000\002\000\
    \002\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\003\000\002\000\002\000\002\000\021\000\
    \002\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\031\000\023\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\030\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\000\000\000\000\000\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\000\000\000\000\000\000\000\000\014\000\019\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\035\000\000\000\000\000\000\000\
    \017\000\000\000\000\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\026\000\037\000\000\000\000\000\000\000\
    \000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \000\000\000\000\000\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\042\000\029\000\000\000\000\000\000\000\041\000\
    \028\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\000\000\000\000\000\000\000\000\036\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
    \000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\009\000\011\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\011\000\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\016\000\000\000\000\000\000\000\000\000\004\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\005\000\005\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \006\000\022\000\023\000\028\000\003\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\029\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\255\255\255\255\255\255\255\255\014\000\013\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\032\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\019\000\019\000\019\000\019\000\019\000\
    \019\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\024\000\032\000\255\255\255\255\255\255\
    \255\255\255\255\020\000\020\000\020\000\020\000\020\000\020\000\
    \255\255\255\255\255\255\019\000\019\000\019\000\019\000\019\000\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\038\000\024\000\255\255\255\255\255\255\038\000\
    \024\000\255\255\020\000\020\000\020\000\020\000\020\000\020\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\255\255\255\255\255\255\255\255\032\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\038\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\038\000\255\255\
    \255\255\255\255\255\255\255\255\038\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\032\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \038\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 140 "lexer.mll"
        ( EOF )
# 318 "lexer.ml"

  | 1 ->
# 142 "lexer.mll"
         ( start_lex := start_pos_of_lexbuf lexbuf; comments 0 lexbuf )
# 323 "lexer.ml"

  | 2 ->
# 143 "lexer.mll"
        ( reset_str(); start_lex := start_pos_of_lexbuf lexbuf; string lexbuf )
# 328 "lexer.ml"

  | 3 ->
# 145 "lexer.mll"
                                         ( create_token lexbuf )
# 333 "lexer.ml"

  | 4 ->
# 146 "lexer.mll"
                            ( INT (lex_range lexbuf, (Int32.of_string (lexeme lexbuf))) )
# 338 "lexer.ml"

  | 5 ->
# 147 "lexer.mll"
                ( token lexbuf )
# 343 "lexer.ml"

  | 6 ->
# 148 "lexer.mll"
            ( newline lexbuf; token lexbuf )
# 348 "lexer.ml"

  | 7 ->
# 153 "lexer.mll"
    ( create_token lexbuf )
# 353 "lexer.ml"

  | 8 ->
let
# 155 "lexer.mll"
         c
# 359 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 155 "lexer.mll"
           ( unexpected_char lexbuf c )
# 363 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comments level lexbuf =
    __ocaml_lex_comments_rec level lexbuf 24
and __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 158 "lexer.mll"
         ( if level = 0 then token lexbuf
	   else comments (level-1) lexbuf )
# 376 "lexer.ml"

  | 1 ->
# 160 "lexer.mll"
         ( comments (level+1) lexbuf)
# 381 "lexer.ml"

  | 2 ->
# 161 "lexer.mll"
             ( comments level lexbuf )
# 386 "lexer.ml"

  | 3 ->
# 162 "lexer.mll"
         ( newline lexbuf; comments level lexbuf )
# 391 "lexer.ml"

  | 4 ->
# 163 "lexer.mll"
         ( raise (Lexer_error (lex_long_range lexbuf,
             Printf.sprintf "comments are not closed")) )
# 397 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 32
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 167 "lexer.mll"
         ( STRING (lex_long_range lexbuf, get_str()) )
# 409 "lexer.ml"

  | 1 ->
# 168 "lexer.mll"
         ( add_str(escaped lexbuf); string lexbuf )
# 414 "lexer.ml"

  | 2 ->
# 169 "lexer.mll"
         ( add_str '\n'; newline lexbuf; string lexbuf )
# 419 "lexer.ml"

  | 3 ->
# 170 "lexer.mll"
         ( raise (Lexer_error (lex_long_range lexbuf,
             Printf.sprintf "String is not terminated")) )
# 425 "lexer.ml"

  | 4 ->
# 172 "lexer.mll"
         ( add_str (Lexing.lexeme_char lexbuf 0); string lexbuf )
# 430 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and escaped lexbuf =
    __ocaml_lex_escaped_rec lexbuf 38
and __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 175 "lexer.mll"
           ( '\n' )
# 442 "lexer.ml"

  | 1 ->
# 176 "lexer.mll"
           ( '\t' )
# 447 "lexer.ml"

  | 2 ->
# 177 "lexer.mll"
           ( '\\' )
# 452 "lexer.ml"

  | 3 ->
# 178 "lexer.mll"
           ( '\034'  )
# 457 "lexer.ml"

  | 4 ->
# 179 "lexer.mll"
           ( '\'' )
# 462 "lexer.ml"

  | 5 ->
# 181 "lexer.mll"
    (
      let x = int_of_string(lexeme lexbuf) in
      if x > 255 then
        raise (Lexer_error (lex_long_range lexbuf,
          (Printf.sprintf "%s is an illegal escaped character constant" (lexeme lexbuf))))
      else
        Char.chr x
    )
# 474 "lexer.ml"

  | 6 ->
# 190 "lexer.mll"
    ( raise (Lexer_error (lex_long_range lexbuf,
        (Printf.sprintf "%s is an illegal escaped character constant" (lexeme lexbuf) ))) )
# 480 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state

;;

