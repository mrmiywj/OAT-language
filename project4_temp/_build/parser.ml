type token =
  | EOF
  | INT of (Range.t * int32)
  | TRUE of (Range.t)
  | FALSE of (Range.t)
  | STRING of (Range.t * string)
  | IDENT of (Range.t * string)
  | TINT of (Range.t)
  | TBOOL of (Range.t)
  | TUNIT of (Range.t)
  | TSTRING of (Range.t)
  | IF of (Range.t)
  | ELSE of (Range.t)
  | WHILE of (Range.t)
  | FOR of (Range.t)
  | RETURN of (Range.t)
  | NEW of (Range.t)
  | FUN of (Range.t)
  | SEMI of (Range.t)
  | COMMA of (Range.t)
  | LBRACE of (Range.t)
  | RBRACE of (Range.t)
  | PLUS of (Range.t)
  | DASH of (Range.t)
  | STAR of (Range.t)
  | SLASH of (Range.t)
  | PERCENT of (Range.t)
  | GT of (Range.t)
  | GTEQ of (Range.t)
  | LT of (Range.t)
  | LTEQ of (Range.t)
  | EQEQ of (Range.t)
  | EQ of (Range.t)
  | BANG of (Range.t)
  | BANGEQ of (Range.t)
  | BAR of (Range.t)
  | AMPER of (Range.t)
  | IOR of (Range.t)
  | IAND of (Range.t)
  | LPAREN of (Range.t)
  | RPAREN of (Range.t)
  | LBRACKET of (Range.t)
  | RBRACKET of (Range.t)
  | TILDE of (Range.t)
  | LTLT of (Range.t)
  | GTGT of (Range.t)
  | GTGTGT of (Range.t)
  | ARROW of (Range.t)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast;;
open Range;;
# 56 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* STRING *);
  261 (* IDENT *);
  262 (* TINT *);
  263 (* TBOOL *);
  264 (* TUNIT *);
  265 (* TSTRING *);
  266 (* IF *);
  267 (* ELSE *);
  268 (* WHILE *);
  269 (* FOR *);
  270 (* RETURN *);
  271 (* NEW *);
  272 (* FUN *);
  273 (* SEMI *);
  274 (* COMMA *);
  275 (* LBRACE *);
  276 (* RBRACE *);
  277 (* PLUS *);
  278 (* DASH *);
  279 (* STAR *);
  280 (* SLASH *);
  281 (* PERCENT *);
  282 (* GT *);
  283 (* GTEQ *);
  284 (* LT *);
  285 (* LTEQ *);
  286 (* EQEQ *);
  287 (* EQ *);
  288 (* BANG *);
  289 (* BANGEQ *);
  290 (* BAR *);
  291 (* AMPER *);
  292 (* IOR *);
  293 (* IAND *);
  294 (* LPAREN *);
  295 (* RPAREN *);
  296 (* LBRACKET *);
  297 (* RBRACKET *);
  298 (* TILDE *);
  299 (* LTLT *);
  300 (* GTGT *);
  301 (* GTGTGT *);
  302 (* ARROW *);
    0|]

let yylhs = "\255\255\
\001\000\008\000\008\000\008\000\010\000\010\000\011\000\011\000\
\002\000\002\000\004\000\013\000\013\000\015\000\015\000\016\000\
\016\000\017\000\017\000\009\000\006\000\006\000\006\000\006\000\
\018\000\018\000\019\000\019\000\020\000\020\000\014\000\014\000\
\005\000\005\000\005\000\005\000\003\000\012\000\012\000\022\000\
\022\000\023\000\023\000\021\000\021\000\024\000\024\000\025\000\
\025\000\026\000\026\000\027\000\027\000\027\000\028\000\028\000\
\028\000\028\000\028\000\029\000\029\000\029\000\029\000\030\000\
\030\000\030\000\031\000\031\000\032\000\032\000\032\000\032\000\
\033\000\033\000\034\000\034\000\034\000\034\000\007\000\007\000\
\036\000\036\000\036\000\036\000\035\000\035\000\035\000\035\000\
\035\000\035\000\037\000\037\000\000\000"

let yylen = "\002\000\
\002\000\003\000\002\000\000\000\000\000\001\000\002\000\004\000\
\011\000\011\000\002\000\003\000\000\000\001\000\003\000\000\000\
\001\000\001\000\003\000\004\000\001\000\001\000\001\000\003\000\
\000\000\001\000\001\000\003\000\001\000\004\000\002\000\000\000\
\001\000\001\000\001\000\001\000\001\000\000\000\001\000\000\000\
\001\000\001\000\003\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\003\000\001\000\003\000\003\000\
\003\000\003\000\001\000\003\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\001\000\002\000\002\000\002\000\001\000\
\004\000\001\000\001\000\001\000\011\000\003\000\001\000\001\000\
\005\000\007\000\005\000\009\000\004\000\005\000\007\000\005\000\
\009\000\003\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\021\000\022\000\000\000\023\000\093\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\024\000\002\000\000\000\000\000\
\006\000\035\000\033\000\034\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\075\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\072\000\074\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\069\000\070\000\000\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\015\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\073\000\000\000\019\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\079\000\080\000\043\000\000\000\000\000\
\039\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\090\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\009\000\
\086\000\081\000\000\000\088\000\083\000\028\000\000\000\000\000\
\000\000\000\000\000\000\087\000\082\000\092\000\000\000\077\000\
\000\000\089\000\084\000"

let yydgoto = "\002\000\
\007\000\008\000\037\000\111\000\038\000\112\000\129\000\010\000\
\113\000\024\000\025\000\138\000\114\000\130\000\058\000\059\000\
\060\000\154\000\155\000\040\000\041\000\086\000\087\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\132\000\133\000\183\000"

let yysindex = "\003\000\
\117\255\000\000\000\000\000\000\012\255\000\000\000\000\117\255\
\252\254\035\000\020\255\036\255\000\000\000\255\046\255\000\000\
\117\255\077\255\024\255\077\255\000\000\000\000\007\255\042\255\
\000\000\000\000\000\000\000\000\000\000\057\255\077\255\024\255\
\089\255\089\255\089\255\089\255\000\000\000\000\000\000\060\255\
\061\255\065\255\071\255\075\255\244\254\016\000\025\255\043\255\
\091\255\000\000\000\000\000\000\080\255\118\255\121\255\089\255\
\101\255\133\255\136\255\000\000\000\000\000\000\135\255\000\000\
\089\255\089\255\089\255\089\255\089\255\089\255\089\255\089\255\
\089\255\089\255\089\255\089\255\089\255\089\255\089\255\089\255\
\089\255\166\255\077\255\077\255\139\255\141\255\000\000\074\255\
\024\255\000\000\000\000\129\255\065\255\071\255\075\255\244\254\
\016\000\016\000\025\255\025\255\025\255\025\255\043\255\043\255\
\043\255\091\255\091\255\000\000\077\255\000\000\172\255\008\255\
\175\255\050\001\089\255\000\000\152\255\000\000\000\000\185\255\
\089\255\170\255\077\255\165\255\171\255\176\255\177\255\077\255\
\050\001\000\000\010\255\000\000\000\000\000\000\183\255\089\255\
\000\000\196\255\000\000\089\255\089\255\089\255\077\255\202\255\
\000\000\089\255\212\255\213\255\218\255\193\255\203\255\204\255\
\226\255\233\255\000\000\000\000\234\255\252\255\239\255\000\000\
\244\255\050\001\050\001\077\255\089\255\000\000\221\255\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\006\000\089\255\
\050\001\050\001\241\255\000\000\000\000\000\000\247\255\000\000\
\050\001\000\000\000\000"

let yyrindex = "\000\000\
\016\001\000\000\000\000\000\000\000\000\000\000\000\000\016\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\001\249\255\000\000\249\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\132\255\000\000\253\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\161\255\
\142\000\126\001\081\255\095\001\064\001\006\001\137\000\021\000\
\190\255\000\000\000\000\000\000\000\000\251\255\000\000\001\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\167\001\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\001\017\001\101\001\089\001\
\031\001\056\001\162\000\187\000\212\000\237\000\050\000\079\000\
\108\000\219\255\248\255\000\000\167\001\000\000\000\000\000\000\
\000\000\040\255\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\144\001\011\255\000\000\000\000\000\000\163\001\
\040\255\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\001\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\125\255\000\000\000\000\000\000\000\000\000\000\
\000\000\135\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\223\255\162\255\000\000\002\000\108\255\044\000\
\255\255\041\001\242\000\131\255\208\000\209\000\062\001\000\000\
\001\001\000\000\180\000\151\255\000\000\214\000\233\000\034\001\
\035\001\033\001\042\001\058\000\255\000\070\000\054\000\228\255\
\000\000\000\000\138\255\142\255\000\000"

let yytablesize = 698
let yytable = "\011\000\
\014\000\063\000\009\000\001\000\061\000\062\000\011\000\064\000\
\131\000\009\000\148\000\054\000\122\000\170\000\120\000\011\000\
\012\000\070\000\009\000\023\000\071\000\023\000\085\000\131\000\
\026\000\027\000\028\000\029\000\030\000\182\000\019\000\092\000\
\057\000\144\000\016\000\015\000\017\000\020\000\031\000\175\000\
\146\000\029\000\032\000\171\000\172\000\033\000\015\000\015\000\
\173\000\065\000\029\000\013\000\108\000\032\000\117\000\034\000\
\131\000\131\000\180\000\032\000\022\000\035\000\181\000\079\000\
\080\000\036\000\186\000\076\000\077\000\078\000\187\000\131\000\
\131\000\018\000\026\000\027\000\028\000\029\000\030\000\131\000\
\055\000\085\000\003\000\004\000\023\000\006\000\021\000\137\000\
\031\000\026\000\027\000\028\000\029\000\030\000\056\000\033\000\
\066\000\047\000\047\000\065\000\047\000\067\000\137\000\031\000\
\068\000\034\000\085\000\151\000\152\000\069\000\033\000\035\000\
\157\000\081\000\021\000\036\000\047\000\047\000\082\000\047\000\
\034\000\047\000\003\000\004\000\005\000\006\000\035\000\097\000\
\098\000\079\000\036\000\137\000\106\000\107\000\079\000\083\000\
\079\000\079\000\079\000\084\000\088\000\153\000\179\000\079\000\
\079\000\103\000\104\000\105\000\029\000\029\000\089\000\029\000\
\029\000\029\000\029\000\090\000\115\000\029\000\029\000\029\000\
\029\000\029\000\153\000\079\000\029\000\029\000\029\000\029\000\
\029\000\119\000\029\000\029\000\029\000\091\000\029\000\029\000\
\029\000\076\000\076\000\116\000\076\000\076\000\076\000\076\000\
\109\000\121\000\076\000\076\000\076\000\076\000\076\000\123\000\
\135\000\076\000\076\000\076\000\076\000\076\000\136\000\076\000\
\019\000\076\000\140\000\076\000\076\000\076\000\066\000\066\000\
\141\000\066\000\066\000\066\000\149\000\142\000\143\000\066\000\
\066\000\066\000\066\000\066\000\147\000\156\000\066\000\066\000\
\066\000\066\000\066\000\158\000\066\000\159\000\066\000\161\000\
\066\000\066\000\066\000\064\000\064\000\160\000\064\000\064\000\
\064\000\162\000\163\000\164\000\064\000\064\000\064\000\064\000\
\064\000\165\000\166\000\064\000\064\000\064\000\064\000\064\000\
\167\000\064\000\168\000\064\000\169\000\064\000\064\000\064\000\
\065\000\065\000\176\000\065\000\065\000\065\000\177\000\004\000\
\016\000\065\000\065\000\065\000\065\000\065\000\178\000\184\000\
\065\000\065\000\065\000\065\000\065\000\185\000\065\000\005\000\
\065\000\007\000\065\000\065\000\065\000\063\000\063\000\040\000\
\063\000\072\000\073\000\074\000\075\000\018\000\063\000\063\000\
\063\000\063\000\063\000\042\000\038\000\063\000\063\000\063\000\
\063\000\063\000\025\000\063\000\053\000\063\000\027\000\063\000\
\063\000\063\000\060\000\060\000\110\000\060\000\099\000\100\000\
\101\000\102\000\139\000\060\000\060\000\060\000\060\000\060\000\
\039\000\145\000\060\000\060\000\060\000\060\000\060\000\174\000\
\060\000\118\000\060\000\134\000\060\000\060\000\060\000\062\000\
\062\000\150\000\062\000\093\000\095\000\094\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\000\000\096\000\062\000\
\062\000\062\000\062\000\062\000\000\000\062\000\000\000\062\000\
\000\000\062\000\062\000\062\000\061\000\061\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\061\000\061\000\061\000\
\061\000\061\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\000\000\061\000\000\000\061\000\000\000\061\000\061\000\
\061\000\059\000\059\000\000\000\059\000\000\000\037\000\037\000\
\000\000\037\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\000\000\059\000\
\000\000\059\000\057\000\057\000\037\000\057\000\037\000\000\000\
\000\000\000\000\000\000\057\000\057\000\057\000\057\000\057\000\
\000\000\000\000\057\000\057\000\057\000\057\000\057\000\000\000\
\057\000\000\000\057\000\058\000\058\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\000\000\000\000\058\000\058\000\058\000\058\000\058\000\
\000\000\058\000\000\000\058\000\055\000\055\000\000\000\055\000\
\000\000\000\000\000\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\000\000\055\000\000\000\055\000\056\000\056\000\000\000\
\056\000\000\000\000\000\000\000\000\000\000\000\056\000\056\000\
\056\000\056\000\056\000\000\000\000\000\056\000\056\000\056\000\
\056\000\056\000\000\000\056\000\000\000\056\000\054\000\054\000\
\000\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\046\000\054\000\046\000\000\000\054\000\054\000\
\054\000\054\000\054\000\000\000\054\000\000\000\054\000\052\000\
\052\000\000\000\052\000\000\000\046\000\046\000\124\000\046\000\
\000\000\046\000\000\000\125\000\052\000\126\000\127\000\052\000\
\052\000\052\000\052\000\052\000\128\000\052\000\000\000\052\000\
\053\000\053\000\000\000\053\000\000\000\000\000\000\000\000\000\
\051\000\051\000\000\000\051\000\000\000\053\000\000\000\000\000\
\053\000\053\000\053\000\053\000\053\000\000\000\053\000\000\000\
\053\000\051\000\051\000\051\000\051\000\000\000\051\000\000\000\
\051\000\050\000\050\000\000\000\050\000\000\000\000\000\049\000\
\049\000\000\000\049\000\000\000\000\000\048\000\048\000\000\000\
\048\000\000\000\050\000\050\000\050\000\050\000\000\000\050\000\
\049\000\050\000\049\000\049\000\000\000\049\000\048\000\049\000\
\048\000\048\000\000\000\048\000\000\000\048\000\045\000\045\000\
\000\000\045\000\044\000\044\000\013\000\044\000\000\000\000\000\
\000\000\013\000\000\000\013\000\013\000\013\000\000\000\000\000\
\000\000\045\000\013\000\013\000\045\000\044\000\045\000\013\000\
\044\000\000\000\044\000\013\000\013\000\000\000\013\000\013\000\
\013\000\000\000\013\000\013\000\013\000\013\000\013\000\000\000\
\000\000\013\000"

let yycheck = "\001\000\
\005\001\035\000\001\000\001\000\033\000\034\000\008\000\036\000\
\114\000\008\000\136\000\005\001\005\001\162\000\109\000\017\000\
\005\001\030\001\017\000\018\000\033\001\020\000\056\000\129\000\
\001\001\002\001\003\001\004\001\005\001\178\000\031\001\065\000\
\031\000\128\000\000\000\040\001\017\001\038\001\015\001\165\000\
\031\001\031\001\019\001\162\000\163\000\022\001\040\001\040\001\
\163\000\040\001\040\001\008\000\081\000\014\001\088\000\032\001\
\162\000\163\000\177\000\020\001\017\000\038\001\177\000\021\001\
\022\001\042\001\185\000\043\001\044\001\045\001\185\000\177\000\
\178\000\038\001\001\001\002\001\003\001\004\001\005\001\185\000\
\039\001\115\000\006\001\007\001\083\000\009\001\041\001\121\000\
\015\001\001\001\002\001\003\001\004\001\005\001\038\001\022\001\
\036\001\017\001\018\001\040\001\020\001\037\001\136\000\015\001\
\034\001\032\001\140\000\141\000\142\000\035\001\022\001\038\001\
\146\000\023\001\041\001\042\001\036\001\037\001\039\001\039\001\
\032\001\041\001\006\001\007\001\008\001\009\001\038\001\070\000\
\071\000\005\001\042\001\165\000\079\000\080\000\010\001\018\001\
\012\001\013\001\014\001\019\001\040\001\143\000\176\000\019\001\
\020\001\076\000\077\000\078\000\017\001\018\001\018\001\020\001\
\021\001\022\001\023\001\020\001\018\001\026\001\027\001\028\001\
\029\001\030\001\164\000\039\001\033\001\034\001\035\001\036\001\
\037\001\041\001\039\001\040\001\041\001\039\001\043\001\044\001\
\045\001\017\001\018\001\039\001\020\001\021\001\022\001\023\001\
\019\001\014\001\026\001\027\001\028\001\029\001\030\001\017\001\
\041\001\033\001\034\001\035\001\036\001\037\001\014\001\039\001\
\031\001\041\001\038\001\043\001\044\001\045\001\017\001\018\001\
\038\001\020\001\021\001\022\001\017\001\038\001\038\001\026\001\
\027\001\028\001\029\001\030\001\038\001\020\001\033\001\034\001\
\035\001\036\001\037\001\016\001\039\001\017\001\041\001\039\001\
\043\001\044\001\045\001\017\001\018\001\020\001\020\001\021\001\
\022\001\039\001\039\001\018\001\026\001\027\001\028\001\029\001\
\030\001\017\001\017\001\033\001\034\001\035\001\036\001\037\001\
\005\001\039\001\020\001\041\001\017\001\043\001\044\001\045\001\
\017\001\018\001\046\001\020\001\021\001\022\001\011\001\000\000\
\020\001\026\001\027\001\028\001\029\001\030\001\017\001\039\001\
\033\001\034\001\035\001\036\001\037\001\039\001\039\001\039\001\
\041\001\039\001\043\001\044\001\045\001\017\001\018\001\039\001\
\020\001\026\001\027\001\028\001\029\001\020\001\026\001\027\001\
\028\001\029\001\030\001\039\001\017\001\033\001\034\001\035\001\
\036\001\037\001\017\001\039\001\020\000\041\001\017\001\043\001\
\044\001\045\001\017\001\018\001\083\000\020\001\072\000\073\000\
\074\000\075\000\123\000\026\001\027\001\028\001\029\001\030\001\
\019\000\129\000\033\001\034\001\035\001\036\001\037\001\164\000\
\039\001\089\000\041\001\115\000\043\001\044\001\045\001\017\001\
\018\001\140\000\020\001\066\000\068\000\067\000\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\255\255\069\000\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\255\255\041\001\
\255\255\043\001\044\001\045\001\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\255\255\041\001\255\255\043\001\044\001\
\045\001\017\001\018\001\255\255\020\001\255\255\017\001\018\001\
\255\255\020\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\255\255\041\001\017\001\018\001\039\001\020\001\041\001\255\255\
\255\255\255\255\255\255\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\255\255\041\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\255\255\041\001\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\255\255\041\001\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\255\255\041\001\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\030\001\020\001\255\255\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\255\255\041\001\017\001\
\018\001\255\255\020\001\255\255\036\001\037\001\005\001\039\001\
\255\255\041\001\255\255\010\001\030\001\012\001\013\001\033\001\
\034\001\035\001\036\001\037\001\019\001\039\001\255\255\041\001\
\017\001\018\001\255\255\020\001\255\255\255\255\255\255\255\255\
\017\001\018\001\255\255\020\001\255\255\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\255\255\
\041\001\034\001\035\001\036\001\037\001\255\255\039\001\255\255\
\041\001\017\001\018\001\255\255\020\001\255\255\255\255\017\001\
\018\001\255\255\020\001\255\255\255\255\017\001\018\001\255\255\
\020\001\255\255\034\001\035\001\036\001\037\001\255\255\039\001\
\034\001\041\001\036\001\037\001\255\255\039\001\034\001\041\001\
\036\001\037\001\255\255\039\001\255\255\041\001\017\001\018\001\
\255\255\020\001\017\001\018\001\005\001\020\001\255\255\255\255\
\255\255\010\001\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\036\001\019\001\020\001\039\001\036\001\041\001\005\001\
\039\001\255\255\041\001\005\001\010\001\255\255\012\001\013\001\
\010\001\255\255\012\001\013\001\014\001\019\001\020\001\255\255\
\255\255\019\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  TRUE\000\
  FALSE\000\
  STRING\000\
  IDENT\000\
  TINT\000\
  TBOOL\000\
  TUNIT\000\
  TSTRING\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  RETURN\000\
  NEW\000\
  FUN\000\
  SEMI\000\
  COMMA\000\
  LBRACE\000\
  RBRACE\000\
  PLUS\000\
  DASH\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  GT\000\
  GTEQ\000\
  LT\000\
  LTEQ\000\
  EQEQ\000\
  EQ\000\
  BANG\000\
  BANGEQ\000\
  BAR\000\
  AMPER\000\
  IOR\000\
  IAND\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  TILDE\000\
  LTLT\000\
  GTGT\000\
  GTGTGT\000\
  ARROW\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 67 "parser.mly"
             ( _1 )
# 471 "parser.ml"
               : Range.t Ast.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 70 "parser.mly"
                    ( Gvdecl(_1)::_3 )
# 480 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 71 "parser.mly"
               ( Gfdecl(_1)::_2 )
# 488 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                ( [] )
# 494 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                ( [] )
# 500 "parser.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argplus) in
    Obj.repr(
# 76 "parser.mly"
            ( _1 )
# 507 "parser.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 79 "parser.mly"
                ( [(_1, _2)] )
# 515 "parser.ml"
               : 'argplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'argplus) in
    Obj.repr(
# 80 "parser.mly"
                            ( (_1, _2)::_4 )
# 525 "parser.ml"
               : 'argplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'arglist) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.block) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'expOPT) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 83 "parser.mly"
                                                                           ( (Some _1, _2, _4, _7, _9) )
# 542 "parser.ml"
               : Range.t Ast.fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'arglist) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.block) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'expOPT) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 84 "parser.mly"
                                                                             ( (None, _2, _4, _7, _9) )
# 559 "parser.ml"
               : Range.t Ast.fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 87 "parser.mly"
                 ( (_1, _2) )
# 567 "parser.ml"
               : Range.t Ast.block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdecls) in
    Obj.repr(
# 90 "parser.mly"
                      ( _1::_3 )
# 576 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( [] )
# 582 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.exp) in
    Obj.repr(
# 94 "parser.mly"
        ( Iexp(_1) )
# 589 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 95 "parser.mly"
                           ( Iarray(mk_parse_range _1 _3, _2) )
# 598 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                ( [] )
# 604 "parser.ml"
               : 'initlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'initplus) in
    Obj.repr(
# 99 "parser.mly"
             ( _1 )
# 611 "parser.ml"
               : 'initlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 102 "parser.mly"
           ( [_1] )
# 618 "parser.ml"
               : 'initplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'init) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initplus) in
    Obj.repr(
# 103 "parser.mly"
                        ( _1::_3 )
# 627 "parser.ml"
               : 'initplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 106 "parser.mly"
                      ( {v_ty=_1; v_id=_2; v_init=_4 } )
# 637 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 109 "parser.mly"
          ( TInt )
# 644 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 110 "parser.mly"
          ( TBool )
# 651 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 111 "parser.mly"
            ( TString )
# 658 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 112 "parser.mly"
                          ( TArray (_1) )
# 667 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                ( [] )
# 673 "parser.ml"
               : 'vdecllist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdeclplus) in
    Obj.repr(
# 117 "parser.mly"
              ( _1 )
# 680 "parser.ml"
               : 'vdecllist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 120 "parser.mly"
            ( [_1] )
# 687 "parser.ml"
               : 'vdeclplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdeclplus) in
    Obj.repr(
# 121 "parser.mly"
                          ( _1::_3 )
# 696 "parser.ml"
               : 'vdeclplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 124 "parser.mly"
          ( Var(_1) )
# 703 "parser.ml"
               : 'lhs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lhs) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 125 "parser.mly"
                              ( Index (_1, _3) )
# 713 "parser.ml"
               : 'lhs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 128 "parser.mly"
               ( _1::_2 )
# 721 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                 ( [] )
# 727 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 132 "parser.mly"
         ( Cbool (_1, true) )
# 734 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 133 "parser.mly"
          ( Cbool (_1, false) )
# 741 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * int32) in
    Obj.repr(
# 134 "parser.mly"
        ( Cint (fst(_1), snd(_1)) )
# 748 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 135 "parser.mly"
           ( Cstring (fst(_1), snd(_1)) )
# 755 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E2) in
    Obj.repr(
# 138 "parser.mly"
       ( _1 )
# 762 "parser.ml"
               : Range.t Ast.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                 ( None )
# 768 "parser.ml"
               : 'expOPT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.exp) in
    Obj.repr(
# 142 "parser.mly"
                 ( Some _1 )
# 775 "parser.ml"
               : 'expOPT))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                ( [] )
# 781 "parser.ml"
               : 'explist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expplus) in
    Obj.repr(
# 146 "parser.mly"
            ( _1 )
# 788 "parser.ml"
               : 'explist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.exp) in
    Obj.repr(
# 149 "parser.mly"
          ( [_1] )
# 795 "parser.ml"
               : 'expplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expplus) in
    Obj.repr(
# 150 "parser.mly"
                      ( _1::_3 )
# 804 "parser.ml"
               : 'expplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E2) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E3) in
    Obj.repr(
# 153 "parser.mly"
              ( Binop (IOr _2, _1, _3) )
# 813 "parser.ml"
               : 'E2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E3) in
    Obj.repr(
# 154 "parser.mly"
       ( _1 )
# 820 "parser.ml"
               : 'E2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E3) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E4) in
    Obj.repr(
# 157 "parser.mly"
               ( Binop (IAnd _2, _1, _3) )
# 829 "parser.ml"
               : 'E3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E4) in
    Obj.repr(
# 158 "parser.mly"
       ( _1 )
# 836 "parser.ml"
               : 'E3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E4) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E5) in
    Obj.repr(
# 161 "parser.mly"
              ( Binop (Or _2, _1, _3) )
# 845 "parser.ml"
               : 'E4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E5) in
    Obj.repr(
# 162 "parser.mly"
       ( _1 )
# 852 "parser.ml"
               : 'E4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E5) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E6) in
    Obj.repr(
# 165 "parser.mly"
                ( Binop (And _2, _1, _3) )
# 861 "parser.ml"
               : 'E5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E6) in
    Obj.repr(
# 166 "parser.mly"
       ( _1 )
# 868 "parser.ml"
               : 'E5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E7) in
    Obj.repr(
# 169 "parser.mly"
               ( Binop (Eq _2, _1, _3) )
# 877 "parser.ml"
               : 'E6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E7) in
    Obj.repr(
# 170 "parser.mly"
                 ( Binop (Neq _2, _1, _3) )
# 886 "parser.ml"
               : 'E6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E7) in
    Obj.repr(
# 171 "parser.mly"
       ( _1 )
# 893 "parser.ml"
               : 'E6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 174 "parser.mly"
             ( Binop (Lt _2, _1, _3) )
# 902 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 175 "parser.mly"
               ( Binop (Lte _2, _1, _3) )
# 911 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 176 "parser.mly"
             ( Binop (Gt _2, _1, _3) )
# 920 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 177 "parser.mly"
               ( Binop (Gte _2, _1, _3) )
# 929 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 178 "parser.mly"
       ( _1 )
# 936 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 181 "parser.mly"
               ( Binop (Shl _2, _1, _3) )
# 945 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 182 "parser.mly"
                 ( Binop (Shr _2, _1, _3) )
# 954 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 183 "parser.mly"
               ( Binop (Sar _2, _1, _3) )
# 963 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 184 "parser.mly"
       ( _1 )
# 970 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E10) in
    Obj.repr(
# 187 "parser.mly"
                ( Binop (Plus _2, _1, _3) )
# 979 "parser.ml"
               : 'E9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E10) in
    Obj.repr(
# 188 "parser.mly"
                ( Binop (Minus _2, _1, _3) )
# 988 "parser.ml"
               : 'E9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E10) in
    Obj.repr(
# 189 "parser.mly"
        ( _1 )
# 995 "parser.ml"
               : 'E9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E10) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 192 "parser.mly"
                 ( Binop (Times _2, _1, _3) )
# 1004 "parser.ml"
               : 'E10))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 193 "parser.mly"
        ( _1 )
# 1011 "parser.ml"
               : 'E10))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 196 "parser.mly"
             ( Unop (Neg _1, _2) )
# 1019 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 197 "parser.mly"
             ( Unop (Lognot _1, _2) )
# 1027 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 198 "parser.mly"
              ( Unop (Not _1, _2) )
# 1035 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E12) in
    Obj.repr(
# 199 "parser.mly"
        ( _1 )
# 1042 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Range.t * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'explist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 202 "parser.mly"
                                ( Ecall (_1, _3) )
# 1052 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E13) in
    Obj.repr(
# 203 "parser.mly"
        ( _1 )
# 1059 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.const) in
    Obj.repr(
# 206 "parser.mly"
          ( Const _1 )
# 1066 "parser.ml"
               : 'E13))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lhs) in
    Obj.repr(
# 207 "parser.mly"
          ( Lhs (_1) )
# 1073 "parser.ml"
               : 'E13))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Ast.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : Range.t Ast.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : Range.t * string) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 209 "parser.mly"
      ( New (_2,_4, _8, _10) )
# 1090 "parser.ml"
               : 'E13))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 210 "parser.mly"
                      ( _2 )
# 1099 "parser.ml"
               : 'E13))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 213 "parser.mly"
       ( _1 )
# 1106 "parser.ml"
               : Range.t Ast.stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 214 "parser.mly"
       ( _1 )
# 1113 "parser.ml"
               : Range.t Ast.stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.stmt) in
    Obj.repr(
# 217 "parser.mly"
                                  ( If(_3, _5, None) )
# 1124 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 218 "parser.mly"
                                  ( If(_3, _5, Some _7) )
# 1137 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 219 "parser.mly"
                               ( While(_3, _5) )
# 1148 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'vdecllist) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expOPT) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'stmtOPT) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 220 "parser.mly"
                                                           ( For(_3, _5, _7, _9) )
# 1163 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lhs) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 224 "parser.mly"
                     ( Assign(_1, _3) )
# 1173 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'explist) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 225 "parser.mly"
                                     ( Scall (_1, _3) )
# 1184 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 226 "parser.mly"
                                  ( If(_3, _5, Some _7) )
# 1197 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 227 "parser.mly"
                               ( While(_3, _5) )
# 1208 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'vdecllist) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expOPT) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'stmtOPT) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 228 "parser.mly"
                                                           ( For(_3, _5, _7, _9) )
# 1223 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.block) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 229 "parser.mly"
                        ( Block(_2) )
# 1232 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
                 ( None )
# 1238 "parser.ml"
               : 'stmtOPT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.stmt) in
    Obj.repr(
# 233 "parser.mly"
                 ( Some _1 )
# 1245 "parser.ml"
               : 'stmtOPT))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Range.t Ast.prog)
